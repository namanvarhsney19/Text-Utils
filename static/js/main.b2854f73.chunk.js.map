{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","about","onClick","toggleMode","htmlFor","style","color","placeholder","backgroundColor","searchButton","TextForm","useState","text","setText","heading","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","newtext","count","forEach","element","length","wordCount","Alert","word","alert","role","charAt","slice","msg","defaultProps","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b2854f73.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"#\">{props.about}</a>\r\n                        </li>\r\n                    </ul>\r\n                    <div className={`form-check form-switch mx-4 text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                        <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label \" htmlFor=\"flexSwitchCheckDefault\">{props.mode === 'light' ? 'Dark' : 'Light'}  mode</label>\r\n                    </div>\r\n                    <form className=\"d-flex\" style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" style={{ backgroundColor: props.mode === 'light' ? 'white' : '#181818' }} />\r\n                        <button className={`btn btn-${props.mode}`} type=\"submit\">{props.searchButton}</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </nav >\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    about: PropTypes.string,\r\n    searchButton: PropTypes.string.isRequired,\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \"Set title here\",\r\n    about: \"About\",\r\n    searchButton: \"Enter your search keyword\"\r\n}","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleLwClick = () => {\r\n        // console.log(\"lowercase clicked.\")\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Lower Case Conversion Done\", \"success\");\r\n    }\r\n    const handleUpClick = () => {\r\n        // console.log(\"uppercase clicked.\")\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Upper Case Conversion Done\", \"success\");\r\n    }\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"On change\");\r\n        setText(event.target.value);\r\n    }\r\n    const handleClearClick = () => {\r\n        // console.log(\"uppercase clicked.\")\r\n        let newText = \"\";\r\n        setText(newText);\r\n        props.showAlert(\"Text in the textarea is cleared\", \"success\");\r\n    }\r\n    const handleSpaceClick = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces in the text are removed\", \"success\");\r\n    }\r\n    const handleCopyClick = () => {\r\n        var text = document.getElementById(\"exampleFormControlTextarea1\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n    }\r\n\r\n    const wordCount = (text) => {\r\n        let newtext = text.split(\" \");\r\n        let count = 0;\r\n        newtext.forEach(element => {\r\n            if (element.length > 0)\r\n                count++;\r\n        });\r\n        return count;\r\n    }\r\n\r\n    const [text, setText] = useState(\"Enter text here\");\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container mb-3\" style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n                <h2 className=\"my3\" style={{ color: props.mode === 'light' ? 'black' : 'white' }}>{props.heading}</h2>\r\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange}\r\n                    style={{ backgroundColor: props.mode === 'light' ? 'white' : '#181818', color: props.mode === 'light' ? 'black' : 'white' }} rows=\"8\" id=\"exampleFormControlTextarea1\" ></textarea>\r\n                <div className=\"container my-3\" style={{ color: props.mode === 'light' ? 'black' : 'white' }}>\r\n                    <button className=\"btn btn-primary mx-2 my-1\" onClick={handleUpClick}>Convert to UPPERCASE</button>\r\n                    <button className=\"btn btn-primary mx-2 my-1\" onClick={handleLwClick}>Convert to lowercase</button>\r\n                    <button className=\"btn btn-primary mx-2 my-1\" onClick={handleCopyClick}>Copy Text</button>\r\n                    <button className=\"btn btn-primary mx-2 my-1\" onClick={handleSpaceClick}>Remove Extra Space</button>\r\n                    <button className=\"btn btn-primary mx-2 my-1\" onClick={handleClearClick}>Clear Text</button>\r\n                </div>\r\n            </div>\r\n            <div className=\"container mb-3\" style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n                <h2 className=\" my-3\">Text Summary</h2>\r\n                <p>Number of words : {wordCount(text)}.</p>\r\n                <p>Number of characters : {text.length}.</p>\r\n                <p>Minutes to read : {text.length === 0 ? 0 : 0.008 * text.split(\" \").length} </p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length === 0 ? \"Enter some text above to preview\" : text}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nTextForm.propTypes = {\r\n    heading: PropTypes.string.isRequired,\r\n}","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalise = (word) => {\r\n        return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalise(props.alert.type)} : </strong>{props.alert.msg}\r\n            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n        </div>\r\n    )\r\n}\r\n","// import logo from './logo.svg';\n// import About from './components/About';\n\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import About from './components/About';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import {\n//     BrowserRouter as Router,\n//     Switch,\n//     Route\n// } from \"react-router-dom\";\n\nfunction App() {\n    const [mode, setMode] = useState(\"light\");\n    const [alert, setAlert] = useState(null);\n\n    const showAlert = (message, type) => {\n        setAlert({\n            msg: message,\n            type: type\n        });\n        setTimeout(() => {\n            setAlert(null);\n        }, 1800);\n    }\n    const toggleMode = () => {\n        if (mode === \"light\") {\n            setMode(\"dark\");\n            document.body.style.backgroundColor = '#181818';\n            showAlert(\"Dark mode has been enabled\", \"primary\")\n        }\n        else {\n            setMode(\"light\");\n            document.body.style.backgroundColor = 'white';\n            showAlert(\"Light mode has been enabled\", \"success\")\n        }\n\n\n    }\n    return (\n        <>\n            {/* <Router> */}\n            <Navbar title=\"TextUtils\" mode={mode} searchButton=\"Find\" toggleMode={toggleMode} />\n            <Alert alert={alert} />\n            {/* <Switch>\n                    <Route exact path=\"/about\">\n                        <About />\n                    </Route>\n                    <Route exact path=\"/\"> */}\n            <TextForm heading=\"Enter the text below\" mode={mode} showAlert={showAlert} />\n            {/* </Route>\n                </Switch>\n            </Router> */}\n\n        </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}